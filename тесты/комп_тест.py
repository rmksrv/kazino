from pytest import fixture as фикстура

from тесты.помощники import исполнить, КОРЕНЬ_ДИР


ПУТЬ_К_ИСХ = КОРЕНЬ_ДИР / "примеры" / "привет_мир.кз"
СТД_ПУТЬ_К_ВЫХ = КОРЕНЬ_ДИР / "out.pyc"


def тест_комп(очистить_выходные_файлы):
    """
    Проверяет, что `казино комп` успешно компилирует программу в out.pyc файл
    """
    результат = исполнить(f"казино комп {ПУТЬ_К_ИСХ}")

    assert результат.код_возвр == 0
    assert СТД_ПУТЬ_К_ВЫХ.exists()
    assert not результат.стд_вывод
    assert not результат.стд_ошибк


def тест_комп_пуск(очистить_выходные_файлы):
    """
    Проверяет, что `казино комп --пусп` успешно компилирует и исполняет программу
    """
    результат = исполнить(f"казино комп --пуск {ПУТЬ_К_ИСХ}")

    assert результат.код_возвр == 0
    assert СТД_ПУТЬ_К_ВЫХ.exists()
    assert результат.стд_вывод == "Туз на месте\n"
    assert not результат.стд_ошибк


def тест_комп_выходной_файл(очистить_выходные_файлы):
    """
    Проверяет, что `казино комп --выходной-файл` успешно компилирует программу 
    в файл с заданным именем
    """
    путь_к_выход_файлу = КОРЕНЬ_ДИР / "моё_имя"
    результат = исполнить(f"казино комп --выходной-файл {путь_к_выход_файлу} {ПУТЬ_К_ИСХ}")

    assert результат.код_возвр == 0
    assert путь_к_выход_файлу.exists()
    assert not результат.стд_вывод
    assert not результат.стд_ошибк


def тест_комп_без_параметров():
    """
    Проверяет, что `казино комп` выдаёт ошибку, если не прокинуты аргументы
    """
    результат = исполнить(f"казино комп")

    assert результат.код_возвр == 2
    assert not результат.стд_вывод
    assert результат.стд_ошибк == (
        "usage: казино [-h] [--допвывод] {комп,интер} ... файл\n"
        "казино: error: the following arguments are required: файл\n"
    )


def тест_комп_помощь():
    """
    Проверяет, что `казино комп -h` покажет подсказку
    """
    результат = исполнить(f"казино комп -h")

    assert результат.код_возвр == 0
    assert результат.стд_вывод == (
        "usage: казино комп [-h] [--пуск] [--выходной-файл ВЫХОДНОЙ_ФАЙЛ]\n"
        "\n"
        "options:\n"
        "  -h, --help            show this help message and exit\n"
        "  --пуск\n"
        "  --выходной-файл ВЫХОДНОЙ_ФАЙЛ\n"
    )
    assert not результат.стд_ошибк


@фикстура(scope="function")
def очистить_выходные_файлы():
    выходные_файлы = [
        СТД_ПУТЬ_К_ВЫХ,
        КОРЕНЬ_ДИР / "моё_имя",
    ]
    yield
    for путь in выходные_файлы:
        путь.unlink(missing_ok=True)

